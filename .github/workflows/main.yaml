name: Build ONNX Runtime and OpenSSL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-libs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2025
            platform: windows-x64
            shell: cmd
          - os: windows-11-arm
            platform: windows-arm64
            shell: cmd
          - os: ubuntu-22.04
            platform: linux-x64
            shell: bash
          - os: ubuntu-22.04-arm
            platform: linux-arm64
            shell: bash
          - os: ubuntu-22.04
            platform: android
            shell: bash
          - os: macos-15
            platform: macos
            sdk: macosx
            shell: bash
          - os: macos-15
            platform: ios
            sdk: iphoneos
            shell: bash
    steps:
      - name: Checkout ONNX Runtime
        uses: actions/checkout@v4
        with:
          repository: Microsoft/onnxruntime
          ref: v1.21.1
          submodules: recursive

      - name: Checkout OpenSSL
        if: matrix.platform != 'macos' && matrix.platform != 'ios'
        uses: actions/checkout@v4
        with:
          repository: openssl/openssl
          ref: openssl-3.5.0
          path: openssl-src

      - name: Setup Python - All Platforms
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup NASM (for OpenSSL) - Windows (x64/arm64)
        if: matrix.platform == 'windows-x64' || matrix.platform == 'windows-arm64'
        shell: pwsh
        run: choco install nasm -y

      - name: Setup Make - Linux (x64/arm64) / Android
        if: matrix.platform == 'linux-x64' || matrix.platform == 'linux-arm64' || matrix.platform == 'android'
        run: |
          sudo apt update
          sudo apt install -y build-essential
        shell: bash

      - name: Setup CMake - Windows (x64/arm64) / Linux (x64) / macOS (x64/arm64) / iOS / Android
        # Ne pas passer à la version 4.x.x, --use_coreml ne fonctionnera pas avec CMake 4.x.x
        if: matrix.platform != 'linux-arm64'
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31.0'

      - name: Setup CMake - Linux (arm64)
        # Ne pas passer à la version 4.x.x, --use_coreml ne fonctionnera pas avec CMake 4.x.x
        if: matrix.platform == 'linux-arm64'
        run: |
          python3 -m pip install cmake==3.31.0
          echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Set version Xcode - macOS / iOS
        if: matrix.platform == 'macos' || matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3.0'

      - name: Determine SDK Path and set SDKROOT - macOS / iOS
        if: matrix.platform == 'macos' || matrix.platform == 'ios'
        run: |
          sdk="${{ matrix.sdk }}"
          SDKROOT=$(xcrun --sdk "$sdk" --show-sdk-path)
          SDKVERSION=$(xcrun --sdk "$sdk" --show-sdk-version)
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV
          echo "Using SDK: $sdk"
          echo "SDK Path: $SDKROOT"
          echo "SDK Version: $SDKVERSION"
        shell: bash

      - name: Setup Java - Android
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Setup SDK Manager for Platforms and NDK - Android
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3
        with:
          packages: 'platforms;android-36 ndk;27.2.12479018'
          accept-android-sdk-licenses: true

      - name: Build OpenSSL - Windows (x64)
        if: matrix.platform == 'windows-x64'
        shell: cmd
        run: |
          rem Initialiser l’environnement
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
      
          rem Enregistrer le dossier racine pour chemins absolus
          set ROOTDIR=%CD%
      
          rem Créer un dossier propre en amont
          mkdir %ROOTDIR%\openssl-artifact-windows\x64\include
          mkdir %ROOTDIR%\openssl-artifact-windows\x64\lib
      
          rem Compiler et installer
          cd openssl-src
          perl Configure VC-WIN64A no-shared --prefix=%ROOTDIR%\openssl-windows\x64
          nmake
          nmake install
      
          rem Lister tous les fichiers pour debug
          dir %ROOTDIR%\openssl-windows\x64 /s /a
      
          rem Copier uniquement ce qu'on veut dans le dossier propre
          xcopy /E /Y %ROOTDIR%\openssl-windows\x64\include %ROOTDIR%\openssl-artifact-windows\x64\include\
          copy %ROOTDIR%\openssl-windows\x64\lib\libcrypto.lib %ROOTDIR%\openssl-artifact-windows\x64\lib\
          copy %ROOTDIR%\openssl-windows\x64\lib\libssl.lib %ROOTDIR%\openssl-artifact-windows\x64\lib\
      
      - name: Build OpenSSL - Windows (arm64)
        if: matrix.platform == 'windows-arm64'
        shell: cmd
        run: |
          rem Initialiser l’environnement
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" arm64

          rem Enregistrer le dossier racine pour chemins absolus
          set ROOTDIR=%CD%
      
          rem Créer un dossier propre en amont
          mkdir %ROOTDIR%\openssl-artifact-windows\arm64\include
          mkdir %ROOTDIR%\openssl-artifact-windows\arm64\lib
      
          rem Compiler et installer
          cd openssl-src
          perl Configure VC-WIN64-ARM no-shared --prefix=%ROOTDIR%\openssl-windows\arm64
          nmake
          nmake install
      
          rem Lister tous les fichiers pour debug
          dir %ROOTDIR%\openssl-windows\arm64 /s /a
      
          rem Copier uniquement ce qu'on veut dans le dossier propre
          xcopy /E /Y %ROOTDIR%\openssl-windows\arm64\include %ROOTDIR%\openssl-artifact-windows\arm64\include\
          copy %ROOTDIR%\openssl-windows\arm64\lib\libcrypto.lib %ROOTDIR%\openssl-artifact-windows\arm64\lib\
          copy %ROOTDIR%\openssl-windows\arm64\lib\libssl.lib %ROOTDIR%\openssl-artifact-windows\arm64\lib\
        
      - name: Build OpenSSL - Linux (x64)
        if: matrix.platform == 'linux-x64'
        run: |
          cd openssl-src
          mkdir -p build-output/x86_64/include
          mkdir -p build-output/x86_64/lib
          mkdir -p openssl-build-x86_64 && cd openssl-build-x86_64
          ../Configure linux-x86_64 -static --static --prefix=$PWD
          make -j$(nproc)
          make install_dev || true
          cp -r include/* ../build-output/x86_64/include/
          cp libcrypto.a libssl.a ../build-output/x86_64/lib/
        shell: bash
      
      - name: Build OpenSSL - Linux (arm64)
        if: matrix.platform == 'linux-arm64'
        run: |
          cd openssl-src
          mkdir -p build-output/arm64/include
          mkdir -p build-output/arm64/lib
          mkdir -p openssl-build-arm64 && cd openssl-build-arm64
          ../Configure linux-aarch64 -static --static --prefix=$PWD
          make -j$(nproc)
          make install_dev || true
          cp -r include/* ../build-output/arm64/include/
          cp libcrypto.a libssl.a ../build-output/arm64/lib/
        shell: bash      

      - name: Build OpenSSL - Android (arm64-v8a / armeabi-v7a)
        if: matrix.platform == 'android'
        run: |      
          cd openssl-src
      
          export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export ANDROID_API=24
          export BUILD_DIR=$GITHUB_WORKSPACE/openssl-android-output
          export FINAL_DIR=$GITHUB_WORKSPACE/openssl-android
      
          mkdir -p "$BUILD_DIR"
          mkdir -p "$FINAL_DIR"
      
          build_openssl() {
            local arch=$1
            local abi=$2
            local temp_dir=$BUILD_DIR/temp-$abi
      
            echo "Building OpenSSL for $arch → $abi"
            ./Configure "$arch" -D__ANDROID_API__=$ANDROID_API -fPIC no-shared
            make -j$(nproc)
            make install DESTDIR="$temp_dir"
            make clean
      
            mkdir -p "$FINAL_DIR/$abi/include"
            mkdir -p "$FINAL_DIR/$abi/lib"
      
            cp -r "$temp_dir/usr/local/include/"* "$FINAL_DIR/$abi/include/"
            cp "$temp_dir/usr/local/lib/libcrypto.a" "$FINAL_DIR/$abi/lib/"
            cp "$temp_dir/usr/local/lib/libssl.a" "$FINAL_DIR/$abi/lib/"
          }
      
          build_openssl android-arm64 arm64-v8a
          build_openssl android-arm armeabi-v7a
  
      - name: Build ONNX Runtime - Windows (x64)
        if: matrix.platform == 'windows-x64'
        run: |
          .\build.bat ^
            --config Release ^
            --build_shared_lib ^
            --parallel ^
            --compile_no_warning_as_error ^
            --skip_submodule_sync ^
            --update ^
            --build
        shell: cmd

      - name: Build ONNX Runtime - Windows (arm64)
        if: matrix.platform == 'windows-arm64'
        run: |
          .\build.bat ^
            --config Release ^
            --build_shared_lib ^
            --parallel ^
            --compile_no_warning_as_error ^
            --skip_submodule_sync ^
            --update ^
            --build
        shell: cmd

      - name: Build ONNX Runtime - Linux (x64)
        if: matrix.platform == 'linux-x64'
        run: |
          ./build.sh \
            --config Release \
            --build_shared_lib \
            --parallel \
            --compile_no_warning_as_error \
            --skip_submodule_sync \
            --update \
            --build
        shell: bash

      - name: Build ONNX Runtime - Linux (arm64)
        if: matrix.platform == 'linux-arm64'
        run: |
          ./build.sh \
            --config Release \
            --build_shared_lib \
            --parallel \
            --compile_no_warning_as_error \
            --skip_submodule_sync \
            --update \
            --build
        shell: bash

      - name: Build ONNX Runtime - Android (arm64-v8a / armeabi-v7a)
        if: matrix.platform == 'android'
        run: |
          # arm64-v8a
          ./build.sh \
            --config Release \
            --android \
            --android_sdk_path $ANDROID_SDK_ROOT \
            --android_ndk_path $ANDROID_NDK_ROOT \
            --android_abi arm64-v8a \
            --android_api 24 \
            --skip_submodule_sync

          # armeabi-v7a
          ./build.sh \
            --config Release \
            --android \
            --android_sdk_path $ANDROID_SDK_ROOT \
            --android_ndk_path $ANDROID_NDK_ROOT \
            --android_abi armeabi-v7a \
            --android_api 24 \
            --skip_submodule_sync
        shell: bash

      - name: Build ONNX Runtime - macOS (x86_64 / arm64)
        if: matrix.platform == 'macos'
        run: |
          # Build fat binary for x86_64 and arm64
          ./build.sh \
            --config Release \
            --use_coreml \
            --build_shared_lib \
            --parallel \
            --compile_no_warning_as_error \
            --skip_submodule_sync \
            --update \
            --build \
            --cmake_extra_defines \
              CMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
              CMAKE_OSX_DEPLOYMENT_TARGET=13.4
        shell: bash  

      - name: Build ONNX Runtime - iOS Device (arm64)
        if: matrix.platform == 'ios'
        run: |
          ./build.sh \
            --config Release \
            --use_coreml \
            --use_xcode \
            --ios \
            --apple_sysroot iphoneos \
            --osx_arch arm64 \
            --apple_deploy_target 16.0 \
            --skip_submodule_sync
        shell: bash

      - name: List and inspect output libraries (Windows)
        if: startsWith(matrix.platform, 'windows')
        shell: pwsh
        run: |
          Write-Host "====== Listing native libraries (.dll/.lib) ======"
          Get-ChildItem -Recurse -Include *.dll, *.lib -Path . | ForEach-Object {
            Write-Host "Found: $($_.FullName)"
            if ($_.Extension -eq '.dll') {
              Write-Host "Running dumpbin for: $($_.FullName)"
              $dumpbin = Get-Command "dumpbin.exe" -ErrorAction SilentlyContinue
              if ($dumpbin) {
                & $dumpbin /DEPENDENTS $_.FullName 2>&1 | Write-Host
              } else {
                Write-Host "dumpbin.exe not found in PATH"
              }
            }
          }
          Write-Host "====== End of listing ======"

      - name: List and inspect output libraries (Unix)
        if: matrix.platform != 'windows-arm64' && matrix.platform != 'windows-x64'
        shell: bash
        run: |
          echo "====== Listing native libraries (.so/.a/.dylib) ======"
          find . -type f \( -iname "*.so" -o -iname "*.a" -o -iname "*.dylib" \) -print | while read file; do
            echo "Found: $file"
            if command -v ldd &> /dev/null; then
              echo "Dependencies for $file:"
              ldd "$file" || true
            elif command -v otool &> /dev/null; then
              echo "Dependencies for $file:"
              otool -L "$file" || true
            fi
          done
          echo "====== End of listing ======"

      - name: Upload OpenSSL Artifacts - Android (arm64-v8a / armeabi-v7a)
        if: matrix.platform == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: openssl-android
          path: openssl-android/

      - name: Upload OpenSSL Artifacts - Linux (x64)
        if: matrix.platform == 'linux-x64'
        uses: actions/upload-artifact@v4
        with:
          name: openssl-linux-x64
          path: openssl-src/build-output/x86_64

      - name: Upload OpenSSL Artifacts - Linux (arm64)
        if: matrix.platform == 'linux-arm64'
        uses: actions/upload-artifact@v4
        with:
          name: openssl-linux-arm64
          path: openssl-src/build-output/arm64

      - name: Upload OpenSSL Artifacts - Windows (x64)
        if: matrix.platform == 'windows-x64'
        uses: actions/upload-artifact@v4
        with:
          name: openssl-windows-x64
          path: openssl-artifact-windows/x64

      - name: Upload OpenSSL Artifacts - Windows (arm64)
        if: matrix.platform == 'windows-arm64'
        uses: actions/upload-artifact@v4
        with:
          name: openssl-windows-arm64
          path: openssl-artifact-windows/arm64

  combine-artifacts:
    name: Combine OpenSSL and ONNX Runtime Artifacts
    needs: build-libs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp

      - name: Restructure artifacts
        run: |
          mkdir -p merged/linux/include merged/linux/lib/x64 merged/linux/lib/arm64
          cp -r temp/openssl-linux-x64/include/* merged/linux/include/
          cp -r temp/openssl-linux-x64/lib/* merged/linux/lib/x64/
          cp -r temp/openssl-linux-arm64/include/* merged/linux/include/
          cp -r temp/openssl-linux-arm64/lib/* merged/linux/lib/arm64/

          mkdir -p merged/windows/include merged/windows/lib/x64 merged/windows/lib/arm64
          cp -r temp/openssl-windows-x64/include/* merged/windows/include/
          cp -r temp/openssl-windows-x64/lib/* merged/windows/lib/x64/
          cp -r temp/openssl-windows-arm64/include/* merged/windows/include/
          cp -r temp/openssl-windows-arm64/lib/* merged/windows/lib/arm64/

          mkdir -p merged/android/include merged/android/lib/arm64-v8a merged/android/lib/armeabi-v7a
          cp -r temp/openssl-android/arm64-v8a/include/* merged/android/include/
          cp -r temp/openssl-android/arm64-v8a/lib/* merged/android/lib/arm64-v8a/
          cp -r temp/openssl-android/armeabi-v7a/lib/* merged/android/lib/armeabi-v7a/

      - name: Zip merged folders
        run: |
          cd merged
          zip -r ../openssl-linux.zip linux/*
          zip -r ../openssl-windows.zip windows/*
          zip -r ../openssl-android.zip android/*

      - name: Deploy assets to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: |
            openssl-linux.zip
            openssl-windows.zip
            openssl-android.zip